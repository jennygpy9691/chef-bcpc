- name: upload chef-client package
  copy:
    src: "{{ assets_download_dir }}/{{ chef_client_package.filename }}"
    dest: "/var/tmp/{{ chef_client_package.filename }}"

- name: install chef-client package
  apt:
    deb: "/var/tmp/{{ chef_client_package.filename }}"

- name: create /etc/chef directory
  file:
    path: /etc/chef
    state: directory
    mode: 0755

- name: get contents of chef validation key
  slurp:
    src: '{{ chef_org_validator_pem }}'
  register: chef_validation_key
  delegate_to: "{{ chef_server_host }}"

- name: install chef validation key
  copy:
    dest: "{{ chef_org_validator_pem }}"
    content: "{{ chef_validation_key['content'] | b64decode }}"

- name: create trusted certs directory
  file:
    path: /etc/chef/trusted_certs
    state: directory
    recurse: true

- name: get chef server ssl crt
  slurp:
    src: '{{ src }}'
  vars:
    filename: '{{ chef_server_fqdn | replace(".", "_") }}.crt'
    src: '/etc/chef/trusted_certs/{{ filename }}'
  register: chef_server_ssl_crt
  delegate_to: "{{ chef_server_host }}"

- name: install chef server ssl crt
  copy:
    dest: '{{ dest }}'
    content: "{{ chef_server_ssl_crt['content'] | b64decode }}"
  vars:
    filename: '{{ chef_server_fqdn | replace(".", "_") }}.crt'
    dest: '/etc/chef/trusted_certs/{{ filename }}'

- name: create chef client log directory
  file:
    path: /var/log/chef
    state: directory
    recurse: true

- name: install client.rb
  template:
    src: client.rb.j2
    dest: /etc/chef/client.rb

- name: check if registered
  become: false
  command: knife node show "{{ node_fqdn }}"
  register: node_registered_check
  failed_when: node_registered_check.rc != 0
  ignore_errors: true
  changed_when: false
  delegate_to: "{{ chef_server_host }}"

- name: register with chef server
  when: node_registered_check is failed
  command: chef-client

- name: check node environment
  become: false
  shell: knife node show -E "{{ node_fqdn }}" | grep "{{ cloud_region }}"
  register: node_env_check
  failed_when: node_env_check.rc != 0
  ignore_errors: true
  changed_when: false
  delegate_to: "{{ chef_server_host }}"

- name: set environment
  when: node_env_check is failed
  become: false
  command: |
    knife node environment set "{{ node_fqdn }}" "{{ cloud_region }}"
  delegate_to: "{{ chef_server_host }}"

- name: check node runlist
  become: false
  shell: knife node show -r "{{ node_fqdn }}" | grep role
  register: node_runlist_check
  failed_when: node_runlist_check.rc != 0
  ignore_errors: true
  changed_when: false
  delegate_to: "{{ chef_server_host }}"

- name: set run list
  when: node_runlist_check is failed
  become: false
  command: knife node run_list add "{{ node_fqdn }}" "{{ node_runlist }}"
  delegate_to: "{{ chef_server_host }}"

- name: capture node details
  become: false
  command: knife node show "{{ node_fqdn }}" --long --format json
  register: node_details_raw
  changed_when: false
  delegate_to: "{{ chef_server_host }}"
  no_log: true

- name: define node_details
  set_fact:
    node_details: >
      {{
        node_details_raw.stdout |
        from_json |
        update_chef_node_host_vars(hostvars[inventory_hostname])
      }}
  no_log: true

- name: write node_details to file
  copy:
    content: "{{ node_details | to_nice_json }}"
    dest: "{{ node_fqdn }}.json"
  delegate_to: "{{ chef_server_host }}"
  no_log: true

- name: import node changes
  command: knife node from file "{{ node_fqdn }}.json"
  delegate_to: "{{ chef_server_host }}"
  changed_when: false
